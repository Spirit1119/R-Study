# The following will display the second row of LivingCost
LivingCost[2,]
# The following will display the third column of LivingCost
LivingCost[,3]
# Suppose you wanted to display only the first and third rows of LivingCost
# Here is one way to do it, using the c() function, which indicates a vector in R
LivingCost[c(1,3),]
# The c() function will be useful in several ways
# Suppose I want to add another column to LivingCost, which will show
# the price of 1lb of potato in each city
LivingCost$Potato = c(1.52, 0.93, 1.34, 1.4, 3.12, 0.63, 0.34)
# R can also make logic comparisons
# For example, the following will check if the rent in Shanghai is more than $2000
# and will return TRUE or FALSE as a result
LivingCost[6,2] > 2000
# The following will check the rent of each city to see if it is more than $2000
# and will return TRUE or FALSE for each city
LivingCost$Rent > 2000
# Such logic operations are useful in several ways
# For example, suppose I wanted to add a new column to Cost
# This column will indicate whether eggs are cheap (<$3) or expensive (> 3) in that city
# Here is how we can add such a column, which I will call CheapEgg
# Its value will be 1 if eggs are cheap in that city and 0 otherwise
# First we create a new column called CheapEgg and initialize the entire column to be 1
LivingCost$CheapEgg = 1
# Then we change the column value to 0 for cities in which the egg cost is more than $3
LivingCost$CheapEgg = ifelse(LivingCost$Eggs>3,0,1)
# Here is another way to achieve the same goal
LivingCost$CheapEgg[LivingCost$Eggs > 3] = 0
clear
# BU510.650 Data Analytics Week 1
# Week 1 Preparation Video
# Example: Cost of Living by City
# Start by setting working directory:
# During the current session, R will use this as the default location
# when looking for input files and creating output files.
# To set working directory: In R Studio, click
# Session -> Set Working Directory -> Choose Directory.
# You could also do this by directly typing a command.
# For example, I keep my R files for this class in a folder called R-Work under the C: folder.
# To set the folder C:/R-Work as my working directory, I would use the following command:
# setwd("C:/R-Work")
# Next we want R to read the data set we want to work with.
# Our data is in the file LivingCost.csv. (I saved mine in the folder C:/R-Work.)
# I want to store the data in LivingCost.csv in a data frame also called LivingCost
# To do so, I will use the read.csv command:
setwd("D:/R-work")
LivingCost <- read.csv("LivingCost.csv")
# To view the data in LivingCost, you can use the View command
View(LivingCost)
# To see the names of columns in LivingCost
colnames(LivingCost)
# To see the names of rows in LivingCost
rownames(LivingCost)
# Suppose you want to display the City column of the LivingCost
# One can do this ins several ways, for example:
LivingCost$City
LivingCost["City"]
# There are even more ways to refer to a particular cell, row, or column of a data frame
# The following will display the value in the second row, third column of LivingCost
LivingCost[2,3]
# The following will display the second row of LivingCost
LivingCost[2,]
# The following will display the third column of LivingCost
LivingCost[,3]
# Suppose you wanted to display only the first and third rows of LivingCost
# Here is one way to do it, using the c() function, which indicates a vector in R
LivingCost[c(1,3),]
# The c() function will be useful in several ways
# Suppose I want to add another column to LivingCost, which will show
# the price of 1lb of potato in each city
LivingCost$Potato = c(1.52, 0.93, 1.34, 1.4, 3.12, 0.63, 0.34)
# R can also make logic comparisons
# For example, the following will check if the rent in Shanghai is more than $2000
# and will return TRUE or FALSE as a result
LivingCost[6,2] > 2000
# The following will check the rent of each city to see if it is more than $2000
# and will return TRUE or FALSE for each city
LivingCost$Rent > 2000
# Such logic operations are useful in several ways
# For example, suppose I wanted to add a new column to Cost
# This column will indicate whether eggs are cheap (<$3) or expensive (> 3) in that city
# Here is how we can add such a column, which I will call CheapEgg
# Its value will be 1 if eggs are cheap in that city and 0 otherwise
# First we create a new column called CheapEgg and initialize the entire column to be 1
LivingCost$CheapEgg = 1
# Then we change the column value to 0 for cities in which the egg cost is more than $3
LivingCost$CheapEgg = ifelse(LivingCost$Eggs>3,0,1)
# Here is another way to achieve the same goal
LivingCost$CheapEgg[LivingCost$Eggs > 3] = 0
setwd("~/")
setwd("D:/R-work")
# BU510.650 Data Analytics Week 1
# Week 1 Preparation Video
# Example: Cost of Living by City
# Start by setting working directory:
# During the current session, R will use this as the default location
# when looking for input files and creating output files.
# To set working directory: In R Studio, click
# Session -> Set Working Directory -> Choose Directory.
# You could also do this by directly typing a command.
# For example, I keep my R files for this class in a folder called R-Work under the C: folder.
# To set the folder C:/R-Work as my working directory, I would use the following command:
# setwd("C:/R-Work")
# Next we want R to read the data set we want to work with.
# Our data is in the file LivingCost.csv. (I saved mine in the folder C:/R-Work.)
# I want to store the data in LivingCost.csv in a data frame also called LivingCost
# To do so, I will use the read.csv command:
setwd("D:/R-work")
LivingCost <- read.csv("LivingCost.csv")
# To view the data in LivingCost, you can use the View command
View(LivingCost)
# To see the names of columns in LivingCost
colnames(LivingCost)
# To see the names of rows in LivingCost
rownames(LivingCost)
# Suppose you want to display the City column of the LivingCost
# One can do this ins several ways, for example:
LivingCost$City
LivingCost["City"]
# There are even more ways to refer to a particular cell, row, or column of a data frame
# The following will display the value in the second row, third column of LivingCost
LivingCost[2,3]
# The following will display the second row of LivingCost
LivingCost[2,]
# The following will display the third column of LivingCost
LivingCost[,3]
# Suppose you wanted to display only the first and third rows of LivingCost
# Here is one way to do it, using the c() function, which indicates a vector in R
LivingCost[c(1,3),]
# The c() function will be useful in several ways
# Suppose I want to add another column to LivingCost, which will show
# the price of 1lb of potato in each city
LivingCost$Potato = c(1.52, 0.93, 1.34, 1.4, 3.12, 0.63, 0.34)
# R can also make logic comparisons
# For example, the following will check if the rent in Shanghai is more than $2000
# and will return TRUE or FALSE as a result
LivingCost[6,2] > 2000
# The following will check the rent of each city to see if it is more than $2000
# and will return TRUE or FALSE for each city
LivingCost$Rent > 2000
# Such logic operations are useful in several ways
# For example, suppose I wanted to add a new column to Cost
# This column will indicate whether eggs are cheap (<$3) or expensive (> 3) in that city
# Here is how we can add such a column, which I will call CheapEgg
# Its value will be 1 if eggs are cheap in that city and 0 otherwise
# First we create a new column called CheapEgg and initialize the entire column to be 1
LivingCost$CheapEgg = 1
# Then we change the column value to 0 for cities in which the egg cost is more than $3
LivingCost$CheapEgg = ifelse(LivingCost$Eggs>3,0,1)
# Here is another way to achieve the same goal
LivingCost$CheapEgg[LivingCost$Eggs > 3] = 0
LivingCost[2,3]
# BU510.650 Data Analytics Week 1
# Week 1 Preparation Video
# Example: Cost of Living by City
# Start by setting working directory:
# During the current session, R will use this as the default location
# when looking for input files and creating output files.
# To set working directory: In R Studio, click
# Session -> Set Working Directory -> Choose Directory.
# You could also do this by directly typing a command.
# For example, I keep my R files for this class in a folder called R-Work under the C: folder.
# To set the folder C:/R-Work as my working directory, I would use the following command:
# setwd("C:/R-Work")
# Next we want R to read the data set we want to work with.
# Our data is in the file LivingCost.csv. (I saved mine in the folder C:/R-Work.)
# I want to store the data in LivingCost.csv in a data frame also called LivingCost
# To do so, I will use the read.csv command:
setwd("D:/R-work")
LivingCost <- read.csv("LivingCost.csv")
# To view the data in LivingCost, you can use the View command
View(LivingCost)
# To see the names of columns in LivingCost
colnames(LivingCost)
# To see the names of rows in LivingCost
rownames(LivingCost)
# Suppose you want to display the City column of the LivingCost
# One can do this ins several ways, for example:
LivingCost$City
LivingCost["City"]
# There are even more ways to refer to a particular cell, row, or column of a data frame
# The following will display the value in the second row, third column of LivingCost
LivingCost[2,3]
# The following will display the second row of LivingCost
LivingCost[2,]
# The following will display the third column of LivingCost
LivingCost[,3]
# Suppose you wanted to display only the first and third rows of LivingCost
# Here is one way to do it, using the c() function, which indicates a vector in R
LivingCost[c(1,3),]
# The c() function will be useful in several ways
# Suppose I want to add another column to LivingCost, which will show
# the price of 1lb of potato in each city
LivingCost$Potato = c(1.52, 0.93, 1.34, 1.4, 3.12, 0.63, 0.34)
# R can also make logic comparisons
# For example, the following will check if the rent in Shanghai is more than $2000
# and will return TRUE or FALSE as a result
LivingCost[6,2] > 2000
# The following will check the rent of each city to see if it is more than $2000
# and will return TRUE or FALSE for each city
LivingCost$Rent > 2000
# Such logic operations are useful in several ways
# For example, suppose I wanted to add a new column to Cost
# This column will indicate whether eggs are cheap (<$3) or expensive (> 3) in that city
# Here is how we can add such a column, which I will call CheapEgg
# Its value will be 1 if eggs are cheap in that city and 0 otherwise
# First we create a new column called CheapEgg and initialize the entire column to be 1
LivingCost$CheapEgg = 1
# Then we change the column value to 0 for cities in which the egg cost is more than $3
LivingCost$CheapEgg = ifelse(LivingCost$Eggs>3,0,1)
# Here is another way to achieve the same goal
LivingCost$CheapEgg[LivingCost$Eggs > 3] = 0
LivingCost[4,3]
# BU510.650 Data Analytics Week 1
# Exploring data using R
# Example: Titanic
# Set working directory: During the current session, R will use this as the default location when
# looking for input files and creating output files.
# To set working directory: In R Studio, click Session -> Set Working Directory -> Choose Directory.
# You could also do this by directly typing a command.
# For example, I keep my R files for this class in a folder called R-Work under the C: folder.
# To set the folder C:/R-Work as my working directory, I would use the following command:
# setwd("C:/R-Work")
# What you see in this pane is an R Script, or the source code.
# If you wish to start a new R Script in R Studio,
# click the new document button in the top-left corner and select "R Script".
# You can create your own R Script in this pane (for example, for your homework) and
# when you save it, your code will be saved as a .R file
# Next we want R to read the data set we want to work with.
# Our data is in the file titanic.csv.
# In R Studio, you can click File -> Import Dataset -> From CSV
# Browse to titanic.csv and select it. Click "Import".
# R will now store the data in titanic.csv in a data frame also called titanic
# Again, you can do this by directly typing a command. For example, to read titanic.csv,
# which I saved in my working directory (in my case, the folder R-Work under C), I would simply use:
titanic <- read.csv("titanic.csv")
# When R reads a .csv file, it stores the data into an object type called a "data frame."
# the above command stored the contents of titanic.csv in a data frame called titanic.
# To view the data frame as a spreadsheet:
View(titanic)
# Let's check what types of variables we have in titanic. We use "str" command.
str(titanic)
# Let's check what values are stored in the Survived column.
# We can use "titanic$Survived" to refer to the "Survived" column of "titanic" data frame.
titanic$Survived
# Let's summarize the information in the Survived column.
# The "table" function goes through a column and counts the occurrence of each value
# In this case how many times 0s and 1s occurred in the "Survived" column,
# with 0 corresponding to a passenger who died and 1 corresponding to a passenger who survived.
table(titanic$Survived)
# The function prop.table will convert the numbers in the table to proportions.
prop.table(table(titanic$Survived))
# The function "summary" summarizes the information contained in this argument.
# Let us summarize the information in the Gender column, which shows each passenger's gender.
summary(titanic$Gender)
# We can also create a multi dimensional table,
# say a table that distributes the passengers according to
# their gender and whether they survived or not.
table(titanic$Gender, titanic$Survived)
# Let's convert the numbers into proportions.
prop.table(table(titanic$Gender, titanic$Survived))
# Let's use prop.table so that the proportions add up to 100% in each row.
prop.table(table(titanic$Gender, titanic$Survived),1)
# Now, let us summarize the information in the Age column.
summary(titanic$Age)
# We will add another column to our data frame.
# This column will be titled "Child"
# It will be equal to 1 if the passenger is less than 18 years old and 1 otherwise.
titanic$Child=0
titanic$Child[titanic$Age<18]=1
# We will use "aggregate" function to count how many passengers survived,
# grouping the passengers according to their gender and whether or not they were children.
# The "aggregate" function divides the data into groups according to
# the variable to the right of "~" and applies the function specified
# in "FUN" to the variable to the left of "~".
# In this case, it will add the numbers (0s and 1s in the Survived column)
# for four different groups of passengers:
# Male children, female children, male adults, female adults.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=sum)
# We will use "aggregate" function again, this time
# to count how many passengers belong to each of the four different groups
# (male children, female children, male adults, female adults).
# We can achieve that by setting "FUN = length".
aggregate(Survived ~ Child + Gender, data=titanic, FUN=length)
# Finally, we will use "aggregate" function again, this time
# to find the proportion that survived in each group.
# Here, "FUN" is set to a function, which we define.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
# Next we add a new column to our data frame, called "Fare2",
# to indicate how expensive the fare was for each passenger.
# We will group them into four: those who paid $30+, between 20 and 30,
# between 10 and 20, and less than 10.
titanic$Fare2<-"30+"
titanic$Fare2[titanic$Fare < 30 & titanic$Fare >= 20] <- "20-30"
titanic$Fare2[titanic$Fare < 20 & titanic$Fare >= 10] <- "10-20"
titanic$Fare2[titanic$Fare < 10] <- "<10"
# Finally, we check how many passengers survived when we group them
# according to their fare category, travel class, and gender.
# We use the "aggregate" function again.
aggregate(Survived ~ Fare2 + Pclass + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
# BU510.650 Data Analytics Week 1
# Exploring data using R
# Example: Titanic
# Set working directory: During the current session, R will use this as the default location when
# looking for input files and creating output files.
# To set working directory: In R Studio, click Session -> Set Working Directory -> Choose Directory.
# You could also do this by directly typing a command.
# For example, I keep my R files for this class in a folder called R-Work under the C: folder.
# To set the folder C:/R-Work as my working directory, I would use the following command:
# setwd("C:/R-Work")
# What you see in this pane is an R Script, or the source code.
# If you wish to start a new R Script in R Studio,
# click the new document button in the top-left corner and select "R Script".
# You can create your own R Script in this pane (for example, for your homework) and
# when you save it, your code will be saved as a .R file
# Next we want R to read the data set we want to work with.
# Our data is in the file titanic.csv.
# In R Studio, you can click File -> Import Dataset -> From CSV
# Browse to titanic.csv and select it. Click "Import".
# R will now store the data in titanic.csv in a data frame also called titanic
# Again, you can do this by directly typing a command. For example, to read titanic.csv,
# which I saved in my working directory (in my case, the folder R-Work under C), I would simply use:
titanic <- read.csv("titanic.csv")
# When R reads a .csv file, it stores the data into an object type called a "data frame."
# the above command stored the contents of titanic.csv in a data frame called titanic.
# To view the data frame as a spreadsheet:
View(titanic)
# Let's check what types of variables we have in titanic. We use "str" command.
str(titanic)
# Let's check what values are stored in the Survived column.
# We can use "titanic$Survived" to refer to the "Survived" column of "titanic" data frame.
titanic$Survived
# Let's summarize the information in the Survived column.
# The "table" function goes through a column and counts the occurrence of each value
# In this case how many times 0s and 1s occurred in the "Survived" column,
# with 0 corresponding to a passenger who died and 1 corresponding to a passenger who survived.
table(titanic$Survived)
# The function prop.table will convert the numbers in the table to proportions.
prop.table(table(titanic$Survived))
# The function "summary" summarizes the information contained in this argument.
# Let us summarize the information in the Gender column, which shows each passenger's gender.
summary(titanic$Gender)
# We can also create a multi dimensional table,
# say a table that distributes the passengers according to
# their gender and whether they survived or not.
table(titanic$Gender, titanic$Survived)
# Let's convert the numbers into proportions.
prop.table(table(titanic$Gender, titanic$Survived))
# Let's use prop.table so that the proportions add up to 100% in each row.
prop.table(table(titanic$Gender, titanic$Survived),1)
# Now, let us summarize the information in the Age column.
summary(titanic$Age)
# We will add another column to our data frame.
# This column will be titled "Child"
# It will be equal to 1 if the passenger is less than 18 years old and 1 otherwise.
titanic$Child=0
titanic$Child[titanic$Age<18]=1
# We will use "aggregate" function to count how many passengers survived,
# grouping the passengers according to their gender and whether or not they were children.
# The "aggregate" function divides the data into groups according to
# the variable to the right of "~" and applies the function specified
# in "FUN" to the variable to the left of "~".
# In this case, it will add the numbers (0s and 1s in the Survived column)
# for four different groups of passengers:
# Male children, female children, male adults, female adults.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=sum)
# We will use "aggregate" function again, this time
# to count how many passengers belong to each of the four different groups
# (male children, female children, male adults, female adults).
# We can achieve that by setting "FUN = length".
aggregate(Survived ~ Child + Gender, data=titanic, FUN=length)
# Finally, we will use "aggregate" function again, this time
# to find the proportion that survived in each group.
# Here, "FUN" is set to a function, which we define.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
# Next we add a new column to our data frame, called "Fare2",
# to indicate how expensive the fare was for each passenger.
# We will group them into four: those who paid $30+, between 20 and 30,
# between 10 and 20, and less than 10.
titanic$Fare2<-"30+"
titanic$Fare2[titanic$Fare < 30 & titanic$Fare >= 20] <- "20-30"
titanic$Fare2[titanic$Fare < 20 & titanic$Fare >= 10] <- "10-20"
titanic$Fare2[titanic$Fare < 10] <- "<10"
# Finally, we check how many passengers survived when we group them
# according to their fare category, travel class, and gender.
# We use the "aggregate" function again.
aggregate(Survived ~ Fare2 + Pclass + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
titanic$Survived
table(titanic$Survived)
prop.table(table(titanic$Survived))
summary(titanic$Age)
summary(titanic$Gender)
prop.table(table(titanic$Survived))
summary(titanic$Gender)
table(titanic$Gender, titanic$Survived)
prop.table(table(titanic$Gender, titanic$Survived))
prop.table(table(titanic$Gender, titanic$Survived),1)
prop.table(table(titanic$Gender, titanic$Survived),2)
titanic$Child=0
titanic$Child=0
titanic$Child[titanic$Age<18]=1
#
titanic(titanic$Name=="Rose",)
titanic(titanic$Name=="Rose",)
#
titanic[titanic$Name=="Rose",]
# We will use "aggregate" function to count how many passengers survived,
# grouping the passengers according to their gender and whether or not they were children.
# The "aggregate" function divides the data into groups according to
# the variable to the right of "~" and applies the function specified
# in "FUN" to the variable to the left of "~".
# In this case, it will add the numbers (0s and 1s in the Survived column)
# for four different groups of passengers:
# Male children, female children, male adults, female adults.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=sum)
# We will use "aggregate" function to count how many passengers survived,
# grouping the passengers according to their gender and whether or not they were children.
# The "aggregate" function divides the data into groups according to
# the variable to the right of "~" and applies the function specified
# in "FUN" to the variable to the left of "~".
# In this case, it will add the numbers (0s and 1s in the Survived column)
# for four different groups of passengers:
# Male children, female children, male adults, female adults.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=sum)
aggregate(Survived ~ Child + Gender, data=titanic, FUN=prop)
aggregate(Survived ~ Child + Gender, data=titanic, FUN=count)
aggregate(Survived ~ Child + Gender, data=titanic, FUN=length)
# We will use "aggregate" function again, this time
# to count how many passengers belong to each of the four different groups
# (male children, female children, male adults, female adults).
# We can achieve that by setting "FUN = length".
# 2*2列联表表示male&female + adults&child,数字表示符合要求的数字.
aggregate(Numbers ~ Child + Gender, data=titanic, FUN=length)
aggregate(Numbers ~ Child + Gender, data=titanic, FUN=length)
# We will use "aggregate" function again, this time
# to count how many passengers belong to each of the four different groups
# (male children, female children, male adults, female adults).
# We can achieve that by setting "FUN = length".
# 2*2列联表表示male&female + adults&child,数字表示符合要求的数字.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=length)
# Finally, we will use "aggregate" function again, this time
# to find the proportion that survived in each group.
# Here, "FUN" is set to a function, which we define.
aggregate(Survived ~ Child + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
# Finally, we check how many passengers survived when we group them
# according to their fare category, travel class, and gender.
# We use the "aggregate" function again.
aggregate(Survived ~ Fare2 + Pclass + Gender, data=titanic, FUN=function(x) {sum(x)/length(x)})
# BU510.650 Data Analytics Week 1
# Plotting data using R
# Example: Film death counts
# Set your working directory.
# In R Studio, click Session -> Set Working Directory -> Choose Directory.
# In my case, it is "C:/R-Work".
# Read the data from the file "filmdeathcounts.csv" into a data frame called "BodyCountData".
BodyCountData = read.csv("filmdeathcounts.csv")
# Let's change the names of the columns in the data frame to shorter and more descriptive names.
# We use "colnames" function and assign a vector of new names.
# The function c() indicates the list of names is a vector.
colnames(BodyCountData) <-c("Film","Year","Bodies","MPAA","Genre","Director","Minutes","IMDB")
# Let's add one more column, "BodyPerMin", which will show
# the number of bodies per minute for each film.
BodyCountData["BodyPerMin"] <- BodyCountData[,3] / BodyCountData[,7]
# Next, we create a table that will show the total number of bodies for each year.
# We use the "tapply" function. In the following line, tapply will check
# what values appear in the "Year" column,
# and for each year, it will "sum" together the numbers
# in the "Bodies" column of the films made in that year.
t1=tapply(BodyCountData$Bodies,BodyCountData$Year,FUN="sum")
# We can now create a barplot that shows the total number of bodies in each year.
barplot(t1,xlab="year",ylab="Total # Bodies")
# Load the library "lattice", which gives us further capabilities for plotting.
library(lattice)
# "barchart" comes with the library "lattice", for example.
barchart(t1)
# Create a new table t2, which will have our data in decreasing order of the third column,
# which is the number of bodies in each movie
t2 <- BodyCountData[order(BodyCountData[,3],decreasing=TRUE),]
# Pick only the first 10 rows of t2 - these are the top-10 movies in terms of body count
t2 <- t2[1:10,]
# Pick only the first columns of t2
t2<-t2[,c(1,3)]
# Create a barchart that shows the number of bodies for each movie in t2
barchart(Film ~ Bodies, data=t2)
# Use the "table" function to find out how many films fell into each MPAA category
t3 <- table(BodyCountData$MPAA)
t3
# Create an xy-plot of all movies, plotting MPAA rating on the x-axis
# and the body count on the y-axis
xyplot(Bodies~MPAA,data=BodyCountData,col="black")
# We could also create a boxplot to capture the same information
boxplot(Bodies~MPAA,data=BodyCountData)
# "bwplot" is the same as boxplot - it comes with the "lattice" library,
# which we loaded earlier
bwplot(Bodies~MPAA,data=BodyCountData)
# Create an xy-plot of all movies, plotting IMDB ratings on the x-axis
# and the body count on the y-axis
xyplot(Bodies~IMDB,data=BodyCountData)
# Create an xy-plot of all movies, plotting IMDB ratings on the x-axis
# and the "bodies per minute" on the y-axis
xyplot(BodyPerMin~IMDB,data=BodyCountData)
# Read the data from the file "filmdeathcounts.csv" into a data frame called "BodyCountData".
BodyCountData = read.csv("filmdeathcounts.csv")
# Let's change the names of the columns in the data frame to shorter and more descriptive names.
# We use "colnames" function and assign a vector of new names.
# The function c() indicates the list of names is a vector.
colnames(BodyCountData) <-c("Film","Year","Bodies","MPAA","Genre","Director","Minutes","IMDB")
# Load the library "lattice", which gives us further capabilities for plotting.
library(lattice)
view(BodyCountData)
View(BodyCountData)
